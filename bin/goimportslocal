#!/bin/bash
# Ensures `goimports` is installed,
# then run it on the files named on the input,
# supplying options needed for the local module (go list -m).

# The goimports program performs Go formatting on a file
# (so it can be used as a drop-in replacement for `gofmt`)
# and also intelligently updates import lists,
# adding missing imports and removing unused ones.
# See https://godoc.org/golang.org/x/tools/cmd/goimports.

# Imports are collected into (up to) three groups, and sorted within each group.
# First: imports of standard Go packages.
# Second: imports of third-party packages via github.com et al.
# Third: imports of local packages.
# Example:

# import (
#   "context"
#   "time"
#
#   "github.com/lib/pq"
#
#   "chain/errors"
#   "chain/log"
#   "chain/net"
# )

# Usage examples:
#   goimportslocal                    # Format all .go files in current directory and subdirs
#   goimportslocal ./...              # Same as above (Go tool convention)
#   goimportslocal -w main.go         # Format specific file(s) with write flag
#   goimportslocal -d ./internal/     # Show diff for directory without writing
#   goimportslocal main.go            # Format specific file to stdout (Vim usage)

set -euo pipefail

if ! command -v goimports > /dev/null; then
  go install golang.org/x/tools/cmd/goimports
fi

# If no arguments or ./... pattern, format all Go files recursively
if [ $# -eq 0 ] || [ "$1" = "./..." ]; then
  find . -name "*.go" -exec goimports -local "$(go list -m)" -w {} \;
else
  # Pass through all arguments to goimports (for Vim, specific files, flags, etc.)
  goimports -local "$(go list -m)" "$@"
fi
